@startuml classes_ATPlatform1
set namespaceSeparator none
class "BTManager" as app.btmanager.BTManager {
  myClient
  myTraders : list
  myTraders_info : dict
  next_trader_id : int
  create_trader(TRADE_SYMBOL: str, TRADE_INTERVAL: str, ALLOCATED_TRADE_QUANTITY: float, TRADE_STRAT: str) -> int
  create_traders_from_env()
  start_all_traders()
  start_trader(index: int)
  stop_trader(index: int)
}
class "rsi_sma_volume_01.Backtest" as app.rsi_sma_volume_01.Backtest {
  RSI_OVERBOUGHT : int
  RSI_OVERSOLD : int
  RSI_PERIOD : int
  SMA_LONG : int
  SMA_SHORT : int
  VOLUME_PERIOD : int
  rsi
  sma_long
  sma_short
  next()
}
class "rsi_strategy01.Backtest" as app.rsi_strategy01.Backtest {
  RSI_OVERBOUGHT : int
  RSI_OVERSOLD : int
  RSI_PERIOD : int
  price_of_position : int
  rsi
  sell_if_up : bool
  sell_if_up_ratio : float
  next()
}
class "Backtester" as app.backtest.Backtester {
  run1(csv_name: str, TRADE_INTERVAL: str, strategy_str)
}
class "Binance_Config" as app.config.Binance_Config {
  BINANCE_API_KEY : NoneType
  BINANCE_API_SECRET : NoneType
  BINANCE_CLIENT_TLD : str
}
class "Flask_Config" as app.config.Flask_Config {
  DEBUG : NoneType
  SECRET_KEY : bytes
  SERVER : NoneType
}
class "rsi_sma_volume_01.Live" as app.rsi_sma_volume_01.Live {
  RSI_OVERBOUGHT : int
  RSI_OVERSOLD : int
  RSI_PERIOD : int
  SMA_LONG : int
  SMA_SHORT : int
  VOLUME_PERIOD : int
  closes : list
  in_position : bool
  price_of_position : int
  volumes : list
  calculate_order()
  process_candles(candles, calculate_order: bool)
}
class "rsi_strategy01.Live" as app.rsi_strategy01.Live {
  RSI_OVERBOUGHT : int
  RSI_OVERSOLD : int
  RSI_PERIOD : int
  closes : list
  in_position : bool
  price_of_position : int
  sell_if_up : bool
  sell_if_up_ratio : float
  calculate_order()
  process_candles(candles, calculate_order: bool)
}
class "LogHandler" as app.log_handler.LogHandler {
  logs_bclient : list
  logs_btrader_all_special : list
  logs_btrader_info : dict
  logs_btrader_special : dict
  logs_error : list
  add_bclient_log(msg, level) -> None
  add_btrader_log(btrader_id: int, level: str, msg: str) -> None
  add_error_log(msg: str, level: str, trader_id: int) -> None
  cook_msg(msg: str, level: str, trader_id) -> str
  get_bclient_logs() -> list
  get_btrader_logs_all_special() -> list
  get_btrader_logs_info(btrader_id: int) -> list
  get_btrader_logs_special(btrader_id: int, level) -> list
  get_error_logs() -> list
}
class "MyClient" as app.bclient.MyClient {
  BinanceConfig
  client : Client
  myLogHandler
  fill_order(trade_symbol: str, side_order: str, use_asset_percentage: bool, trade_quantity: float, order_type, report_str) -> Tuple[bool, str]
  printAPI()
}
class "Strategies" as app.config.Strategies {
  ALL_INTERVALS : list
  B_STRATS
}
class "StrategyManager" as app.strategy_manager.StrategyManager {
  get_strategy_bt(strategy_str: str) -> bt.Strategy
  get_strategy_live(strategy_str: str, report_info: Callable[[str, str], None], trade_action: Callable[[str, float, bool], bool]) -> bStrategy
}
class "Trade_Info" as app.config.Trade_Info {
  DEFAULT_INTERVAL : str
  DEFAULT_STRAT : str
  DEFAULT_SYMBOL : str
  TRADE_BOTS : dict, list, set, tuple
}
class "WebSocketHandler" as app.btrader.WebSocketHandler {
  SOCKET : str
  on_message : Callable[[str], None]
  reconnection_count : int
  reconnection_limit : int
  report_error_str : Callable[[str, str], None]
  stop_flag : bool
  thread : NoneType, Thread
  start()
  stop()
  websocket_loop()
}
class "bStrategy" as app.bstrategy.bStrategy {
  report_info : Callable[[str, str], None]
  trade_action : Callable[[str, float, bool], bool]
  calculate_order()
  process_candles(candles, calculate_order: bool)
}
class "bTrader" as app.btrader.bTrader {
  ALLOCATED_TRADE_QUANTITY : float
  SOCKET
  TRADE_INTERVAL : str
  TRADE_SYMBOL : str
  candle_limit : int
  candles
  executor1 : ThreadPoolExecutor
  myClient
  strategy
  trader_id : int
  websocket_handler
  ws_running : bool
  get_logs_info() -> list
  get_logs_special() -> list
  init_closes()
  new_candle_closed(candle)
  on_message(message: str)
  print(msg: str, level)
  start()
  stop()
  trade_action(side: str, quantity, is_asset_percentage) -> bool
}

app.btmanager.BTManager "1" *-- "0..*" app.btrader.bTrader : myTraders
app.btmanager.BTManager o-- app.bclient.MyClient : myClient
app.btmanager.BTManager --- app.strategy_manager.StrategyManager
app.btmanager.BTManager o-- app.config.Trade_Info : TRADE_BOTS

app.backtest.Backtester -- app.strategy_manager.StrategyManager
app.log_handler.LogHandler -- app.bclient.MyClient : myLogHandler

app.bclient.MyClient o-- app.config.Binance_Config : BinanceConfig
app.bclient.MyClient -- app.binance.Client : client

app.strategy_manager.StrategyManager o-- app.config.Strategies : Strategies
app.strategy_manager.StrategyManager --- app.bstrategy.bStrategy : returns
app.strategy_manager.StrategyManager -- app.rsi_sma_volume_01.Backtest : returns
app.strategy_manager.StrategyManager -- app.rsi_strategy01.Backtest : returns
app.strategy_manager.StrategyManager -- app.rsi_sma_volume_01.Live : returns
app.strategy_manager.StrategyManager -- app.rsi_strategy01.Live : returns

app.bstrategy.bStrategy <|-- app.rsi_sma_volume_01.Live
app.bstrategy.bStrategy <|-- app.rsi_strategy01.Live

app.btrader.bTrader o--- app.bclient.MyClient : myClient
app.btrader.bTrader o-- app.btrader.WebSocketHandler : websocket_handler
app.btrader.bTrader o-- app.bstrategy.bStrategy : strategy

app.btrader.WebSocketHandler -- app.btrader.bTrader : returns
app.bstrategy.bStrategy -- app.btrader.bTrader : returns

' custom
app.rsi_sma_volume_01.Backtest -- app.strategy_manager.StrategyManager
app.rsi_strategy01.Backtest -- app.strategy_manager.StrategyManager
app.rsi_sma_volume_01.Live -- app.strategy_manager.StrategyManager
app.rsi_strategy01.Live -- app.strategy_manager.StrategyManager


' app.rsi_sma_volume_01.Backtest -- app.bstrategy.bStrategy
' app.rsi_strategy01.Backtest -- app.bstrategy.bStrategy
' app.rsi_sma_volume_01.Live -- app.bstrategy.bStrategy
' app.rsi_strategy01.Live -- app.bstrategy.bStrategy

' app.bstrategy.bStrategy <|-- app.rsi_sma_volume_01.Backtest
' app.bstrategy.bStrategy <|-- app.rsi_strategy01.Backtest



' ' app.rsi_sma_volume_01.Live --|> app.bstrategy.bStrategy
' ' app.rsi_strategy01.Live --|> app.bstrategy.bStrategy
' ' app.btrader.WebSocketHandler --* app.btrader.bTrader : websocket_handler
' ' app.log_handler.LogHandler --* app.bclient.MyClient : myLogHandler
' ' app.rsi_sma_volume_01.Live --* app.btrader.bTrader : strategy
' ' app.rsi_strategy01.Live --* app.btrader.bTrader : strategy
' ' app.bclient.MyClient --o app.btrader.bTrader : myClient
' ' app.config.Binance_Config --o app.bclient.MyClient : BinanceConfig

' ' app.btmanager.BTManager "1" --> "*" app.btrader.bTrader : manages
' ' app.backtest.Backtester "1" --> "1" app.bclient.MyClient : uses
' ' app.btmanager.BTManager "1" --> "1" app.bclient.MyClient : uses
' ' app.btrader.bTrader "1" --> "1" app.bclient.MyClient : uses
' ' app.btrader.bTrader "1" --> "1" app.btrader.WebSocketHandler : uses

' ' app.rsi_sma_volume_01.Backtest --|> app.bstrategy.bStrategy
' ' app.rsi_strategy01.Backtest --|> app.bstrategy.bStrategy
' ' app.config.Strategies "1" --> "1" app.strategy_manager.StrategyManager: uses
' ' app.config.Flask_Config --|> app.config.Binance_Config
' ' app.config.Binance_Config "1" --> "1" app.config.Strategies: uses
' ' app.config.Binance_Config "1" --> "1" app.strategy_manager.StrategyManager: uses
' ' app.backtest.Backtester "1" --> "1" app.config.Binance_Config: uses
' ' app.config.Trade_Info "1" --> "1" app.btmanager.BTManager: uses
' ' app.strategy_manager.StrategyManager "1" --> "*" app.btrader.bTrader: strategy_manager
' ' app.btmanager.BTManager "1" --> "1" app.strategy_manager.StrategyManager: uses
' ' app.log_handler.LogHandler --* app.btmanager.BTManager: has_log_handler
' ' app.config.Binance_Config --o app.config.Flask_Config: uses
' ' app.rsi_strategy01.Backtest "1" --> "1" app.backtest.Backtester: uses
' ' app.rsi_sma_volume_01.Backtest "1" --> "1" app.backtest.Backtester: uses
' ' app.bclient.MyClient "1" --> "1" app.btmanager.BTManager: uses
' ' app.strategy_manager.StrategyManager "1" --> "*" app.config.Strategies: manages
' ' app.config.Trade_Info "1" --> "*" app.btmanager.BTManager: manages
' ' app.backtest.Backtester "1" --> "1" app.strategy_manager.StrategyManager: uses
' ' app.bclient.MyClient "1" --> "1" app.strategy_manager.StrategyManager: uses
' ' app.btrader.bTrader "1" --> "1" app.strategy_manager.StrategyManager: uses
' ' app.btmanager.BTManager "1" --> "1" app.log_handler.LogHandler: uses
' ' app.bclient.MyClient "1" --> "1" app.log_handler.LogHandler: uses
' ' app.btrader.bTrader "1" --> "1" app.log_handler.LogHandler: uses

@enduml
